// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Registry.Repository;

#nullable disable

namespace Registry.Migrations
{
    [DbContext(typeof(TradesManDbContext))]
    [Migration("20250501193741_AddDescriptionToTradesMan")]
    partial class AddDescriptionToTradesMan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Registry.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TradesManId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TradesManId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Registry.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Registry.Models.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TradesManId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TradesManId");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("Registry.Models.TradesMan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TradesMan");
                });

            modelBuilder.Entity("Registry.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Registry.Models.Job", b =>
                {
                    b.HasOne("Registry.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Registry.Models.User", "TradesMan")
                        .WithMany()
                        .HasForeignKey("TradesManId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TradesMan");
                });

            modelBuilder.Entity("Registry.Models.Review", b =>
                {
                    b.HasOne("Registry.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Registry.Models.Specialty", b =>
                {
                    b.HasOne("Registry.Models.Job", null)
                        .WithMany("JobTypes")
                        .HasForeignKey("JobId");

                    b.HasOne("Registry.Models.TradesMan", null)
                        .WithMany("Specialties")
                        .HasForeignKey("TradesManId");
                });

            modelBuilder.Entity("Registry.Models.TradesMan", b =>
                {
                    b.HasOne("Registry.Models.User", null)
                        .WithOne("TradesManProfile")
                        .HasForeignKey("Registry.Models.TradesMan", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Registry.Models.Job", b =>
                {
                    b.Navigation("JobTypes");
                });

            modelBuilder.Entity("Registry.Models.TradesMan", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("Registry.Models.User", b =>
                {
                    b.Navigation("TradesManProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
